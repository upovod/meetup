Оптимизация высоконагруженного проекта
путём переноса по модулям с PHP на Go
15 Dec 2014
Tags: meetup, go, advert, legacy, php

Виталий Левченко
Ведущий разработчик, Youlamedia
levchenko@youlamedia.com

* Кто я

- PHP developer
- Школа жизни в Topface _(как_Badoo,_только_интереснее)_
- Последний год — Youlamedia (интернет-реклама)
- Team lead
- Go developer
- System architect
.image logo.png
.image gopherbw.png _ 250

* Про что рассказ

- Было плохо, и PHP
- Стало лучше, и немного Go	
.image biplane.jpg _ 500

* Некоторые результаты

- Среднее время отдачи рекламы сократилось в 7 раз
- 95 перцентиль — в 15 раз
- 99 перцентиль — в 20 раз
- Расход памяти сократился в 5 раз
- Расход CPU сократился в 5 раз
.image run.png

* Грустная реальность

- PHP4 legacy code
- Fear Driven Development
 /**
  * !!!Warning!!!
  * Do not edit this file.
  */
- Никаких тестов
- Никакой документации
- Масса малоиспользуемой бизнес-логики

* Основные проблемы

- Полностью проект не знает никто
- Любые изменения очень дорогие
- PHP
- Стóящих PHP программистов так же мало, как и остальных

* Хотелки

- Новые фичи быстрее и надёжнее
- Сократить издержки на железо
- Стабильность и устойчивость

* Почему Go?

- Потому что не Python/Ruby
.image shilo.jpg

* Почему Go?
- Потому что не Java/С#
.image java.png 500 _

* Почему Go?

- Потому что не C/C++
.image compiling.png

* Почему Go?
- Несколько человек в компании уже знают Go
- Небольшие распределённые сетевые приложения — основной кейс
- Миллионы мух-энтузиастов не могут ошибаться
.image luck.png 164 _

* Теперь у нас 2 проблемы

- Стóящих Go программистов ещё меньше
- Экспертиза гораздо меньше
- С чего начинать?
.image perl_problems.png
.caption [[http://xkcd.com/1171/][© xkcd]]

* Как браться?

- Изолированный функционал
- Самый тяжёлый по CPU/памяти функционал
- Источник боли
- Минимальный функционал

* Делаем ротатор рекламы

* Архитектура

- HTTP интерфейс
- JSON объекты
- Небольшой локальный сервис
.image project.png

* Нативная имплементация

- MVP, тупо транслируем
- В разы хуже PHP
- 100-200Mb аллокаций хеша на запрос
.image garbage.jpg _ 600

* Используем голову

- Аллокаций всячески избегать
- Всё в кеш, только ссылки, copy-on-write
- Считаем заранее всё что возможно
- Достаём всё за 1 раз
- Проверяем в редисе за 1 раз
- Балансинг для минимизации кеша
- KISS vs DRY
.image smart.png

* Проверяем всё что можно

- Defer тоже аллокация
- Hash map: 100B на элемент
- Синхронизация >100ns
- HTTP payload — 500ms latency
.image smart.png

* Утилиты

- `pprof`
- `gcvis`
- `go`build`-race`
- `yandex.tank`
- `graphite`
- `netem`
.image noob.png

* Бессердечный продакшн

- Без PHP в 30-50 раз быстрее
- С PHP выигрыша нет
- Картина профайлинга с/без PHP разительно отличается
.image wut.jpg

* NUMA

- Теоретически, доступ к памяти: 100ns → 200ns
- Реально: 100ns → 0.2–10ms
- Могло быть и хуже
- Привязываем к 1 NUMA-ноде, выносим на отдельные сервера
.image numa.png

* Docker

- В контейнере +1ms к запросу
- 99 перцентиль >200ms
- На 20% меньше предельный rps
- `--privileged` спасает
.image docker.jpg 350 _

* Итоги

- Время ответа модуля: 30ms → 2ms
- Общее время ответа: 35ms → 7ms
- Память: 12Gb → 0.6Gb
.image graph.png

* Итоги

- 500 rps → 2500 rps
- Документация
- Тесты
- Простая поддержка
- Ядро: 2000 строк → 400 строк 
- Местами переусложнено

* Планы

- Модульное приложение (12-factor app)
- Вытеснение PHP
- CoreOS?
- Docker Swarm?
.image future.jpg 350 _
